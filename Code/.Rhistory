summary(cars)
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```{r cars}
summary(cars)
```
source('//usindndowd008/nd13953$/Desktop/Primary_analysis_09212016.R')
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
# Read in data file
data <- read.delim("\\\\elnt118/agrditda/UIUC/Guo, Boyi/Data/idcompare_proteingroups.txt",header=T,sep="\t",strip.white=T)
dim(data)
data[,53]
file.name <- 'idcompare_proteingroups.txt'
# Read in data file
data <- read.delim(paste0("\\\\elnt118/agrditda/UIUC/Guo, Boyi/Data/",file.name),header=T,sep="\t",strip.white=T)
# Due to the output format, the last column of read in data is all vacant
# Need to delete the 53th column, which is the vacant column
data <- data[,-53]
?read.delim
install.packages("plotly")
p <- plot_ly(sample.hitrate,rowSums(count.data),main="Total Spectrum Counts Vs Hit Rate",
xlab = "Hit Rate",ylab="Total Spectrum Counts")
p
library(plotly)
p <- plot_ly(sample.hitrate,rowSums(count.data),main="Total Spectrum Counts Vs Hit Rate",
xlab = "Hit Rate",ylab="Total Spectrum Counts")
p
?plotly
plot_ly
?plot_ly
count.data <- cbind(sample.hitrate,count.data)
p <- plot_ly(x = sample.hit.rate,
y = sample.total.spectrum.counts,
type="scatter",mode="markers")
p
plot_ly(
x=data$Occurence,
type="histogram"
)
names(data)
plot_ly(
x=data$Occurrence,
type="histogram"
)
plot_ly(
x=data$Occurrence,
type="histogram"
)
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)
plot_ly(
x=data$Occurrence,
type="histogram"
)
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence")
)
plot_ly(
x=data$Occurrence,
type="histogram"
)
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence")
)
plot_ly(
x=data$Occurrence,
type="histogram"
)
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence")
)
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence")
)
# Occurence Hist
plot_ly(
)
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence")
)
# Occurence Hist
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.>=0.80,]$Occurrence,name="1"")
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence")
)
# Occurence Hist
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.>=0.80,]$Occurrence,name="1")
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence"),
yaxis=list(title="Frequency Count")
)
# Occurence Hist
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.>=0.80,]$Occurrence,name="1")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.<0.80,]$Occurrence,name="2")
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence"),
yaxis=list(title="Frequency Count")
)
# Occurence Hist
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.>=0.80,]$Occurrence,name="Confidence >= 0.8")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.<0.80,]$Occurrence,name="Confidence < 0.8")
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence"),
yaxis=list(title="Frequency Count")
)
# Occurence Hist
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.>=0.80,]$Occurrence,name="Confidence >= 0.8")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.<0.80,]$Occurrence,name="Confidence < 0.8")%>%
layout(
title = "Histogram of Protein Group Occurence",
xaxis=list(title="Occurrence"),
yaxis=list(title="Frequency Count")
)
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence"),
yaxis=list(title="Frequency Count")
)
# Occurence Hist
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.>=0.80,]$Occurrence,name="Confi >= 0.8")%>%
add_histogram(x=data[data$Confidence.1...Local.False.Positive.Rate.<0.80,]$Occurrence,name="Confi < 0.8")%>%
layout(
title = "Histogram of Protein Group Occurence",
xaxis=list(title="Occurrence"),
yaxis=list(title="Frequency Count")
)
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence"),
yaxis=list(title="Frequency Count")
)
# Occurence Hist
conf_threshold <- 0.80
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(
x=data[data$Confidence.1...Local.False.Positive.Rate.>=conf_threshold,]$Occurrence,
name=paste0("Confi >= ",conf_threshold))%>%
add_histogram(
x=data[data$Confidence.1...Local.False.Positive.Rate.<conf_threshold,]$Occurrence,
name=paste0("Confi < ",conf_threshold))%>%
layout(
title = "Histogram of Protein Group Occurence",
xaxis=list(title="Occurrence"),
yaxis=list(title="Frequency Count")
)
# Confidence Level Hist
plot_ly(
x=data$Confidence.1...Local.False.Positive.Rate.,
type="histogram"
)%>%
layout(
title = "Histogram of Protein Group Confidence Level",
xaxis=list(title="Confidence"),
yaxis=list(title="Frequency Count")
)
# Occurence Hist
inputPanel(
sliderInput("Confi_threshold",
label="Confidence Threshold:",
min=0.5,max=1,value=0.8,step=0.05
)
)
conf_threshold <- input$confi_threshold
plot_ly(
)%>%
add_histogram(x=data$Occurrence,name="All")%>%
add_histogram(
x=data[data$Confidence.1...Local.False.Positive.Rate.>=conf_threshold,]$Occurrence,
name=paste0("Confi >= ",conf_threshold))%>%
add_histogram(
x=data[data$Confidence.1...Local.False.Positive.Rate.<conf_threshold,]$Occurrence,
name=paste0("Confi < ",conf_threshold))%>%
layout(
title = "Histogram of Protein Group Occurence",
xaxis=list(title="Occurrence"),
yaxis=list(title="Frequency Count")
)
?p.adjust
# Read in data file
file.name <- 'idcompare_proteingroups.txt'
data <- read.delim(
file=paste0("\\\\elnt118/agrditda/UIUC/Guo, Boyi/Data/",file.name),
header=T,sep="\t",strip.white=T)
# Due to the output format, the last column of read in data is all vacant
# Need to delete the 53th column, which is the vacant column
data <- data[,-53]
# Sample information
sample.indices <- grep("Spectrum_Count",names(data))
sample.size <- length(sample.indices)
sample.full.names <- names(data)[sample.indices]
sample.names <- substr(sample.full.names,33,nchar(sample.full.names))
sample.hit.rate <- c(69,100,50,12,44,60,81,69,50,73,88,31,60,60)
protein.names <- data$Defline
protein.size <- length(protein.names)
count.data <- t(data[,sample.indices])
sample.total.spectrum.counts <- rowSums(count.data)
colnames(count.data) <- protein.names
rownames(count.data) <- sample.names
count.data <- cbind(sample.hit.rate,count.data)
head(data$Total.Spectrum.Count)
?order
a <- c(3,7,5)
a[order(a)]
library(shiny); print(source('//usindndowd008/nd13953$/Desktop/temp.R')$value)
file.name <- 'idcompare_proteingroups.txt'
data <- read.delim(
file=paste0("\\\\elnt118/agrditda/UIUC/Guo, Boyi/Data/",file.name),
header=T,sep="\t",strip.white=T)
# Due to the output format, the last column of read in data is all vacant
# Need to delete the 53th column, which is the vacant column
data <- data[,-53]
# Sample information
sample.indices <- grep("Spectrum_Count",names(data))
sample.size <- length(sample.indices)
sample.full.names <- names(data)[sample.indices]
sample.names <- substr(sample.full.names,33,nchar(sample.full.names))
sample.hit.rate <- c(69,100,50,12,44,60,81,69,50,73,88,31,60,60)
protein.names <- data$Defline
protein.size <- length(protein.names)
count.data <- t(data[,sample.indices])
sample.total.spectrum.counts <- rowSums(count.data)
colnames(count.data) <- protein.names
rownames(count.data) <- sample.names
count.data <- cbind(sample.hit.rate,count.data)
dim(count.data)
d3heatmap
?d3heatmap
head(names(count.data))
head(colnames(count.data))
count.data <- count.data[order(count.data[,"sample.hit.rate"],decreasing = T),]
renderPlotly
renderPlotly
?renderPlotly
?Plot_ly
??plot_ly
??renderPlotly
plotly::plotly()
shinyApp(ui, server)
source('~/.active-rstudio-document')
library(shiny)
library(plotly)
ui <- fluidPage(
plotlyOutput("plot"),
verbatimTextOutput("event")
)
server <- function(input, output) {
# renderPlotly() also understands ggplot2 objects!
output$plot <- renderPlotly({
plot_ly(mtcars, x = ~mpg, y = ~wt)
})
output$event <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover on a point!" else d
})
}
shinyApp(ui, server)
library(plotly)
library(shiny)
ui <- fluidPage(
radioButtons("plotType", "Plot Type:", choices = c("ggplotly", "plotly")),
plotlyOutput("plot"),
verbatimTextOutput("hover"),
verbatimTextOutput("click"),
verbatimTextOutput("brush"),
verbatimTextOutput("zoom")
)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# use the key aesthetic/argument to help uniquely identify selected observations
key <- row.names(mtcars)
if (identical(input$plotType, "ggplotly")) {
p <- ggplot(mtcars, aes(x = mpg, y = wt, colour = factor(vs), key = key)) +
geom_point()
ggplotly(p) %>% layout(dragmode = "select")
} else {
plot_ly(mtcars, x = ~mpg, y = ~wt, key = ~key) %>%
layout(dragmode = "select")
}
})
output$hover <- renderPrint({
d <- event_data("plotly_hover")
if (is.null(d)) "Hover events appear here (unhover to clear)" else d
})
output$click <- renderPrint({
d <- event_data("plotly_click")
if (is.null(d)) "Click events appear here (double-click to clear)" else d
})
output$brush <- renderPrint({
d <- event_data("plotly_selected")
if (is.null(d)) "Click and drag events (i.e., select/lasso) appear here (double-click to clear)" else d
})
output$zoom <- renderPrint({
d <- event_data("plotly_relayout")
if (is.null(d)) "Relayout (i.e., zoom) events appear here" else d
})
}
shinyApp(ui, server)
?data_event
??data_event
??event_data
??eventReactive
paste(c(1,2,3,4))
paste(c(1,2,3,4),sep="\n")
sessionInfo()
source('~/.active-rstudio-document', echo=TRUE)
library(Rcpp)
cppFunction('bool all(LogicalVector x){
int n = x.size;
int i = 0;
for(i=0; i < n; i++){
if(x[i]==false) return false;
}
return true;
}
')
cppFunction('bool all(LogicalVector x){
int n = x.size;
int i = 0;
for(i=0; i < n; i++){
if(x[i]==false) return false;
}
return true;
}
')
remove.packages(c("plotly","shiny","d3heatmap","DT","energy"))
install.packages(c("plotly","shiny","d3heatmap","DT","energy"))
install.packages(c("plotly","shiny","d3heatmap","DT","energy"))
install.packages("ggplot2")
table(factor(c(1,2,1,2,1)))
min(table(factor(c(1,2,1,2,1))))
cor(c(2,3,4),c(1,2,3))
cor(matrix(c(1,2,3,3,2,1),nrow=3),c(1,2,3))
cor(matrix(c(1,2,3,3,2,1,1,3,2),nrow=3),c(1,2,3))
cor
cor(matrix(c(1,2,3,3,2,1,1,3,2),nrow=3),c(1,2,3))
crossprod
?crossprod
?outter
?outer
outer(c(1,2,3),c(4,5,6),FUN="-")
outer(c(1,2,3),c(4,5,6),FUN="-")^2
sum(outer(c(1,2,3),c(4,5,6),FUN="-")^2)
sum(matrix(rep(1,6),nrow=3))
outer(c(1,2,3),c(1,2,3),FUN="-")
install.packages(data.tree)
install.packages("data.tree")
library(data.tree)
peak <- Node$new("top")
peak$addChildNode(Node$new("L",p=10))
left.child <- Node$new("left",p=10)
peak$addChildNode(left.child)
peak
print(peak)
peak$addChild("test")
peak$AddChild("test")
peak$AddChildNode(left.child)
print(peak)
left.child$p
left.child$fieldsAll
left.child$fieldsAll
left.child$name <- NULL
Node$new(res=1)
div
div()
install.packages("shinyjs")
library(MASS)
tmp<-mvrnorm(10,rep(0,2),diag(2))
cor(tmp,tmp[,1])
abs(cor(tmp,tmp[,1]))
which.max(abs(cor(tmp,tmp[,1])))
sample(x=10,size=5,replace=T)
mm <- read.csv("http://www.ats.ucla.edu/stat/data/mmreg.csv")
colnames(mm) <- c("Control", "Concept", "Motivation", "Read", "Write", "Math",
"Science", "Sex")
psych <- mm[, 1:3]
acad <- mm[, 4:8]
library("CCA")
matcor(psych, acad)
cc1 <- cc(psych, acad)
cc1$cor
cc1[3:4]
cc1
cc2 <- comput(psych, acad, cc1)
cc2$xscores
cor(psych,cc2$xscores)
head(cc2$xscores)
head(pysch%*%cc1$xcoef)
head(psych%*%cc1$xcoef)
cc1$xcoef
pysch%*%cc1$xcoef
psych %*% cc1$xcoef
class(psych)
as.matrix(psych)
head(as.matrix(psych %*% cc1$xcoef))
head(as.matrix(psych) %*% cc1$xcoef)
head(cc2$xscores)
head(as.matrix(psych) %*% t(cc1$xcoef)
)
head(as.matrix(scale(psych))%*%cc1$xcoef)
head(cc1$scores$xscores)
cc
rcc
geigen
comput()
comput
scale
?scale
x <- mvrnorm(100,rep(0,10),diag(10))
library("MASS")
x <- mvrnorm(100,rep(0,10),diag(10))
y <- X*cbind(c(rep(1,2),rep(0,8)),c(rep(0,8),rep(2,2)))
x <- mvrnorm(100,rep(0,10),diag(10))
y <- x*cbind(c(rep(1,2),rep(0,8)),c(rep(0,8),rep(2,2)))
cbind(c(rep(1,2),rep(0,8)),c(rep(0,8),rep(2,2)))
dim(x)
y <- x%*%cbind(c(rep(1,2),rep(0,8)),c(rep(0,8),rep(2,2)))
y
cc1 <- cc(x,y)
cc1$ycoef
cc1$xcoef
setwd("//usindndowd008/nd13953$/Desktop/ProAn_v2.0")
